name: Apply patch from Issue -> MAIN

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write

jobs:
  apply-to-main:
    if: >
      (github.event_name == 'issues' && contains(github.event.issue.title, '[PATCH:MAIN]')) ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'apply-to-main') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '```'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Extract patch from issue/comment body
        id: grab
        shell: bash
        run: |
          set -euo pipefail
          BODY=$(jq -r '.comment.body // .issue.body' "$GITHUB_EVENT_PATH")
          printf '%s\n' "$BODY" > body.txt

          # 1) пробуем ```patch
          awk '
            /```patch/ {inb=1; next}
            /```/ && inb==1 {exit}
            inb==1 {print}
          ' body.txt > changes.patch

          # 2) если пусто — пробуем ```diff
          if [ ! -s changes.patch ]; then
            awk '
              /```diff/ {inb=1; next}
              /```/ && inb==1 {exit}
              inb==1 {print}
            ' body.txt > changes.patch || true
          fi

          # 3) если всё ещё пусто — берём ПЕРВЫЙ любой код-блок ```
          if [ ! -s changes.patch ]; then
            awk '
              /```/ { if(inb==0){inb=1; next} else if(inb==1){exit} }
              inb==1 {print}
            ' body.txt > changes.patch || true
          fi

          echo "::group::Patch preview (first 50 lines)"
          head -n 50 changes.patch || true
          echo "::endgroup::"

          if [ ! -s changes.patch ]; then
            echo "No code block found. Please paste the patch inside a code fence like:"
            echo "```patch"
            echo "<your unified diff here>"
            echo "```"
            exit 1
          fi

      - name: Apply & push to main
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "agent-bot"
          git config user.email "agent@users.noreply.github.com"
          git apply --whitespace=fix changes.patch
          git add -A
          git commit -m "chore(agent): apply patch to main from issue #${GITHUB_EVENT_NUMBER:-manual}"
          git push origin HEAD:main